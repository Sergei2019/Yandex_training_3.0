"""
Вовочка ломает систему безопасности Пентагона. 
Для этого ему понадобилось узнать, какие символы в секретных зашифрованных посланиях употребляются чаще других. 
Для удобства изучения Вовочка хочет получить графическое представление встречаемости символов.
 Поэтому он хочет построить гистограмму количества символов в сообщении. 
 Гистограмма — это график, в котором каждому символу, встречающемуся в сообщении хотя бы один раз, 
соответствует столбик, высота которого пропорциональна количеству этих символов в сообщении.

Формат ввода
Входной файл содержит зашифрованный текст сообщения. Он содержит строчные 
и прописные латинские буквы,
цифры, знаки препинания («.», «!», «?», «:», «-», «,», «;», «(», «)»), 
пробелы и переводы строк.
Размер входного файла не превышает 10000 байт. 
Текст содержит хотя бы один непробельный символ.
Все строки входного файла не длиннее 200 символов.
Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов «#»,
количество которых должно быть равно количеству символов c в данном тексте. 
Под каждым столбиком напишите символ, соответствующий ему.
Отформатируйте гистограмму так, чтобы нижние концы столбиков были на одной строке, 
первая строка и первый столбец были непустыми.
Не отделяйте столбики друг от друга. 
Отсортируйте столбики в порядке увеличения кодов символов.

Формат вывода
Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов «#»,
количество которых должно быть равно количеству символов c в данном тексте.
Под каждым столбиком напишите символ, соответствующий ему.
Отформатируйте гистограмму так, чтобы нижние концы столбиков были на одной строке, первая строка и первый столбец были непустыми.
Не отделяйте столбики друг от друга. Отсортируйте столбики в порядке увеличения кодов символов.
"""
with open('input.txt') as r:
    stroka = '\n'.join(r.readlines())

d_ord, d_col = {}, {}
res = []

for el in stroka:
    count = 1
    if el != ' ' and el != '\n':
        if el in d_col:
            d_col[el] = d_col[el]+1
        else:
            d_col[el] = count
            d_ord[el] = ord(el)
d_ord_sorted = dict(sorted(d_ord.items(), key=lambda x: x[1]))
for k, v in d_ord_sorted.items():
    d_ord_sorted[k] = d_col[k]

max_dict_val = max(d_col.values())

for i in range(max_dict_val):
    str_for_res = ''
    for k,v in d_ord_sorted.items():
        if v >= max_dict_val-i:
            str_for_res = str_for_res + '#'
        else:
            str_for_res = str_for_res + ' '
    res.append(str_for_res)

print('\n'.join(res))
print(''.join(d_ord_sorted.keys()))
